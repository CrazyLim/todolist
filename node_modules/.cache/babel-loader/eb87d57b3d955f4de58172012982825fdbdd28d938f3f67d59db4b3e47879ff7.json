{"ast":null,"code":"var _jsxFileName = \"E:\\\\Leon\\\\todolist\\\\src\\\\components\\\\GomokuGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './GomokuGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GomokuGame = () => {\n  _s();\n  const BOARD_SIZE = 15;\n  const [board, setBoard] = useState(Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(null)));\n  const [currentPlayer, setCurrentPlayer] = useState('black');\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [gameMode, setGameMode] = useState('player'); // 'player', 'ai', 'tourist'\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForTourist, setWaitingForTourist] = useState(false);\n  const [playerRole, setPlayerRole] = useState('black'); // 当前玩家的角色，用于游客模式\n\n  // 检查获胜条件\n  const checkWin = (row, col, currentBoard = board, player = currentPlayer) => {\n    const directions = [[0, 1],\n    // 水平\n    [1, 0],\n    // 垂直\n    [1, 1],\n    // 对角线\n    [1, -1] // 反对角线\n    ];\n    for (const [dx, dy] of directions) {\n      let count = 1;\n      // 向一个方向检查\n      for (let i = 1; i <= 4; i++) {\n        const newRow = row + i * dx;\n        const newCol = col + i * dy;\n        if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE && currentBoard[newRow][newCol] === player) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      // 向相反方向检查\n      for (let i = 1; i <= 4; i++) {\n        const newRow = row - i * dx;\n        const newCol = col - i * dy;\n        if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE && currentBoard[newRow][newCol] === player) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      // 五子连珠\n      if (count >= 5) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // AI落子逻辑 - 简单的AI实现\n  const aiMove = () => {\n    // 复制当前棋盘状态\n    const currentBoard = board.map(r => [...r]);\n\n    // 1. 优先检查是否能获胜\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (currentBoard[row][col] === null) {\n          currentBoard[row][col] = 'white'; // AI是白方\n          if (checkWin(row, col, currentBoard, 'white')) {\n            handleAiCellClick(row, col);\n            return;\n          }\n          currentBoard[row][col] = null; // 恢复状态\n        }\n      }\n    }\n\n    // 2. 检查是否需要阻止玩家获胜\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (currentBoard[row][col] === null) {\n          currentBoard[row][col] = 'black'; // 玩家是黑方\n          if (checkWin(row, col, currentBoard, 'black')) {\n            handleAiCellClick(row, col);\n            return;\n          }\n          currentBoard[row][col] = null; // 恢复状态\n        }\n      }\n    }\n\n    // 3. 在中心区域随机选择一个位置落子\n    const centerArea = [];\n    for (let row = 4; row < 11; row++) {\n      for (let col = 4; col < 11; col++) {\n        if (currentBoard[row][col] === null) {\n          centerArea.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    if (centerArea.length > 0) {\n      const randomMove = centerArea[Math.floor(Math.random() * centerArea.length)];\n      handleAiCellClick(randomMove.row, randomMove.col);\n      return;\n    }\n\n    // 4. 在任意空位随机落子\n    const emptyCells = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (currentBoard[row][col] === null) {\n          emptyCells.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    if (emptyCells.length > 0) {\n      const randomMove = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      handleAiCellClick(randomMove.row, randomMove.col);\n    }\n  };\n\n  // AI落子处理函数\n  const handleAiCellClick = (row, col) => {\n    const newBoard = board.map(r => [...r]);\n    newBoard[row][col] = 'white'; // AI始终是白方\n    setBoard(newBoard);\n    if (checkWin(row, col, newBoard, 'white')) {\n      setGameOver(true);\n      setWinner('white');\n    } else {\n      setCurrentPlayer('black'); // 轮到玩家（黑方）\n    }\n  };\n\n  // 处理落子\n  const handleCellClick = (row, col) => {\n    // 检查游戏是否结束或位置已被占用\n    if (gameOver || board[row][col] !== null) return;\n\n    // 游客模式下，确保当前是玩家的回合\n    if (gameMode === 'tourist' && currentPlayer !== playerRole) return;\n    const newBoard = board.map(r => [...r]);\n    newBoard[row][col] = currentPlayer;\n    setBoard(newBoard);\n    if (checkWin(row, col, newBoard)) {\n      setGameOver(true);\n      setWinner(currentPlayer);\n    } else {\n      // 根据游戏模式决定下一步\n      if (gameMode === 'ai' && currentPlayer === 'black') {\n        // AI模式下，玩家（黑方）落子后，AI（白方）自动落子\n        setCurrentPlayer('white');\n        // 延迟AI落子，让玩家有时间看到自己的棋子\n        setTimeout(() => aiMove(), 500);\n      } else if (gameMode === 'tourist') {\n        // 游客模式下，模拟游客落子\n        setCurrentPlayer(currentPlayer === 'black' ? 'white' : 'black');\n        if (currentPlayer !== playerRole) {\n          // 延迟游客落子\n          setTimeout(() => simulateTouristMove(), 800);\n        }\n      } else {\n        // 玩家对战模式\n        setCurrentPlayer(currentPlayer === 'black' ? 'white' : 'black');\n      }\n    }\n  };\n\n  // 模拟游客落子（简化版）\n  const simulateTouristMove = () => {\n    if (gameOver) return;\n    const emptyCells = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (board[row][col] === null) {\n          emptyCells.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    if (emptyCells.length > 0) {\n      // 简单的游客AI逻辑，优先在已有棋子附近落子\n      const adjacentCells = [];\n      const randomCells = [];\n\n      // 检查是否有棋子在周围\n      for (const {\n        row,\n        col\n      } of emptyCells) {\n        let hasAdjacent = false;\n        for (let dr = -2; dr <= 2; dr++) {\n          for (let dc = -2; dc <= 2; dc++) {\n            if (dr === 0 && dc === 0) continue;\n            const r = row + dr;\n            const c = col + dc;\n            if (r >= 0 && r < BOARD_SIZE && c >= 0 && c < BOARD_SIZE && board[r][c] !== null) {\n              hasAdjacent = true;\n              break;\n            }\n          }\n          if (hasAdjacent) break;\n        }\n        if (hasAdjacent) {\n          adjacentCells.push({\n            row,\n            col\n          });\n        } else {\n          randomCells.push({\n            row,\n            col\n          });\n        }\n      }\n\n      // 优先选择有相邻棋子的位置\n      const targetCells = adjacentCells.length > 0 ? adjacentCells : randomCells;\n      const randomMove = targetCells[Math.floor(Math.random() * targetCells.length)];\n      const newBoard = board.map(r => [...r]);\n      newBoard[randomMove.row][randomMove.col] = currentPlayer;\n      setBoard(newBoard);\n      if (checkWin(randomMove.row, randomMove.col, newBoard)) {\n        setGameOver(true);\n        setWinner(currentPlayer);\n      } else {\n        setCurrentPlayer(currentPlayer === 'black' ? 'white' : 'black');\n      }\n    }\n  };\n\n  // 重置游戏\n  const resetGame = () => {\n    setBoard(Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(null)));\n    setCurrentPlayer('black');\n    setGameOver(false);\n    setWinner(null);\n    setGameStarted(false);\n    setWaitingForTourist(false);\n  };\n\n  // 开始游戏\n  const startGame = mode => {\n    setGameMode(mode);\n    setGameStarted(true);\n    setBoard(Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(null)));\n    setCurrentPlayer('black');\n    setGameOver(false);\n    setWinner(null);\n\n    // 游客模式下，随机分配玩家角色\n    if (mode === 'tourist') {\n      setPlayerRole(Math.random() > 0.5 ? 'black' : 'white');\n      setWaitingForTourist(true);\n      // 模拟游客加入\n      setTimeout(() => {\n        setWaitingForTourist(false);\n        // 如果玩家是白方，游客（黑方）先行\n        if (playerRole === 'white') {\n          setTimeout(() => simulateTouristMove(), 500);\n        }\n      }, 1500);\n    }\n  };\n\n  // 绘制棋盘\n  const renderBoard = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gomoku-board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gomoku-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gomoku-cell\",\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cell && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `gomoku-stone ${cell}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 26\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gomoku-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u4E94\\u5B50\\u68CB\\u6E38\\u620F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"game-info\",\n      children: gameOver ? `游戏结束！获胜方: ${winner === 'black' ? '黑方' : '白方'}` : `当前回合: ${currentPlayer === 'black' ? '黑方' : '白方'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), renderBoard(), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-btn\",\n      onClick: resetGame,\n      children: \"\\u91CD\\u65B0\\u5F00\\u59CB\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-rules\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\u6E38\\u620F\\u89C4\\u5219\\uFF1A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u9ED1\\u65B9\\u5148\\u884C\\uFF0C\\u53CC\\u65B9\\u8F6E\\u6D41\\u5728\\u68CB\\u76D8\\u4E0A\\u843D\\u5B50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u5148\\u5728\\u6A2A\\u3001\\u7AD6\\u6216\\u5BF9\\u89D2\\u7EBF\\u65B9\\u5411\\u8FDE\\u6210\\u4E94\\u5B50\\u7684\\u4E00\\u65B9\\u83B7\\u80DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u70B9\\u51FB\\u68CB\\u76D8\\u4E0A\\u7684\\u4EA4\\u53C9\\u70B9\\u843D\\u5B50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(GomokuGame, \"rRwD+dbB812Xn0AsL8NFXLXyvcY=\");\n_c = GomokuGame;\nexport default GomokuGame;\nvar _c;\n$RefreshReg$(_c, \"GomokuGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GomokuGame","_s","BOARD_SIZE","board","setBoard","Array","fill","map","currentPlayer","setCurrentPlayer","gameOver","setGameOver","winner","setWinner","gameMode","setGameMode","gameStarted","setGameStarted","waitingForTourist","setWaitingForTourist","playerRole","setPlayerRole","checkWin","row","col","currentBoard","player","directions","dx","dy","count","i","newRow","newCol","aiMove","r","handleAiCellClick","centerArea","push","length","randomMove","Math","floor","random","emptyCells","newBoard","handleCellClick","setTimeout","simulateTouristMove","adjacentCells","randomCells","hasAdjacent","dr","dc","c","targetCells","resetGame","startGame","mode","renderBoard","className","children","rowIndex","cell","colIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Leon/todolist/src/components/GomokuGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './GomokuGame.css';\n\nconst GomokuGame = () => {\n  const BOARD_SIZE = 15;\n  const [board, setBoard] = useState(Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(null)));\n  const [currentPlayer, setCurrentPlayer] = useState('black');\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [gameMode, setGameMode] = useState('player'); // 'player', 'ai', 'tourist'\n  const [gameStarted, setGameStarted] = useState(false);\n  const [waitingForTourist, setWaitingForTourist] = useState(false);\n  const [playerRole, setPlayerRole] = useState('black'); // 当前玩家的角色，用于游客模式\n\n  // 检查获胜条件\n  const checkWin = (row, col, currentBoard = board, player = currentPlayer) => {\n    const directions = [\n      [0, 1],  // 水平\n      [1, 0],  // 垂直\n      [1, 1],  // 对角线\n      [1, -1]  // 反对角线\n    ];\n\n    for (const [dx, dy] of directions) {\n      let count = 1;\n      // 向一个方向检查\n      for (let i = 1; i <= 4; i++) {\n        const newRow = row + i * dx;\n        const newCol = col + i * dy;\n        if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE && \n            currentBoard[newRow][newCol] === player) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      // 向相反方向检查\n      for (let i = 1; i <= 4; i++) {\n        const newRow = row - i * dx;\n        const newCol = col - i * dy;\n        if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE && \n            currentBoard[newRow][newCol] === player) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      // 五子连珠\n      if (count >= 5) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // AI落子逻辑 - 简单的AI实现\n  const aiMove = () => {\n    // 复制当前棋盘状态\n    const currentBoard = board.map(r => [...r]);\n    \n    // 1. 优先检查是否能获胜\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (currentBoard[row][col] === null) {\n          currentBoard[row][col] = 'white'; // AI是白方\n          if (checkWin(row, col, currentBoard, 'white')) {\n            handleAiCellClick(row, col);\n            return;\n          }\n          currentBoard[row][col] = null; // 恢复状态\n        }\n      }\n    }\n    \n    // 2. 检查是否需要阻止玩家获胜\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (currentBoard[row][col] === null) {\n          currentBoard[row][col] = 'black'; // 玩家是黑方\n          if (checkWin(row, col, currentBoard, 'black')) {\n            handleAiCellClick(row, col);\n            return;\n          }\n          currentBoard[row][col] = null; // 恢复状态\n        }\n      }\n    }\n    \n    // 3. 在中心区域随机选择一个位置落子\n    const centerArea = [];\n    for (let row = 4; row < 11; row++) {\n      for (let col = 4; col < 11; col++) {\n        if (currentBoard[row][col] === null) {\n          centerArea.push({row, col});\n        }\n      }\n    }\n    \n    if (centerArea.length > 0) {\n      const randomMove = centerArea[Math.floor(Math.random() * centerArea.length)];\n      handleAiCellClick(randomMove.row, randomMove.col);\n      return;\n    }\n    \n    // 4. 在任意空位随机落子\n    const emptyCells = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (currentBoard[row][col] === null) {\n          emptyCells.push({row, col});\n        }\n      }\n    }\n    \n    if (emptyCells.length > 0) {\n      const randomMove = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      handleAiCellClick(randomMove.row, randomMove.col);\n    }\n  };\n\n  // AI落子处理函数\n  const handleAiCellClick = (row, col) => {\n    const newBoard = board.map(r => [...r]);\n    newBoard[row][col] = 'white'; // AI始终是白方\n    setBoard(newBoard);\n\n    if (checkWin(row, col, newBoard, 'white')) {\n      setGameOver(true);\n      setWinner('white');\n    } else {\n      setCurrentPlayer('black'); // 轮到玩家（黑方）\n    }\n  };\n\n  // 处理落子\n  const handleCellClick = (row, col) => {\n    // 检查游戏是否结束或位置已被占用\n    if (gameOver || board[row][col] !== null) return;\n    \n    // 游客模式下，确保当前是玩家的回合\n    if (gameMode === 'tourist' && currentPlayer !== playerRole) return;\n\n    const newBoard = board.map(r => [...r]);\n    newBoard[row][col] = currentPlayer;\n    setBoard(newBoard);\n\n    if (checkWin(row, col, newBoard)) {\n      setGameOver(true);\n      setWinner(currentPlayer);\n    } else {\n      // 根据游戏模式决定下一步\n      if (gameMode === 'ai' && currentPlayer === 'black') {\n        // AI模式下，玩家（黑方）落子后，AI（白方）自动落子\n        setCurrentPlayer('white');\n        // 延迟AI落子，让玩家有时间看到自己的棋子\n        setTimeout(() => aiMove(), 500);\n      } else if (gameMode === 'tourist') {\n        // 游客模式下，模拟游客落子\n        setCurrentPlayer(currentPlayer === 'black' ? 'white' : 'black');\n        if (currentPlayer !== playerRole) {\n          // 延迟游客落子\n          setTimeout(() => simulateTouristMove(), 800);\n        }\n      } else {\n        // 玩家对战模式\n        setCurrentPlayer(currentPlayer === 'black' ? 'white' : 'black');\n      }\n    }\n  };\n\n  // 模拟游客落子（简化版）\n  const simulateTouristMove = () => {\n    if (gameOver) return;\n    \n    const emptyCells = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (board[row][col] === null) {\n          emptyCells.push({row, col});\n        }\n      }\n    }\n    \n    if (emptyCells.length > 0) {\n      // 简单的游客AI逻辑，优先在已有棋子附近落子\n      const adjacentCells = [];\n      const randomCells = [];\n      \n      // 检查是否有棋子在周围\n      for (const {row, col} of emptyCells) {\n        let hasAdjacent = false;\n        for (let dr = -2; dr <= 2; dr++) {\n          for (let dc = -2; dc <= 2; dc++) {\n            if (dr === 0 && dc === 0) continue;\n            const r = row + dr;\n            const c = col + dc;\n            if (r >= 0 && r < BOARD_SIZE && c >= 0 && c < BOARD_SIZE && board[r][c] !== null) {\n              hasAdjacent = true;\n              break;\n            }\n          }\n          if (hasAdjacent) break;\n        }\n        \n        if (hasAdjacent) {\n          adjacentCells.push({row, col});\n        } else {\n          randomCells.push({row, col});\n        }\n      }\n      \n      // 优先选择有相邻棋子的位置\n      const targetCells = adjacentCells.length > 0 ? adjacentCells : randomCells;\n      const randomMove = targetCells[Math.floor(Math.random() * targetCells.length)];\n      \n      const newBoard = board.map(r => [...r]);\n      newBoard[randomMove.row][randomMove.col] = currentPlayer;\n      setBoard(newBoard);\n      \n      if (checkWin(randomMove.row, randomMove.col, newBoard)) {\n        setGameOver(true);\n        setWinner(currentPlayer);\n      } else {\n        setCurrentPlayer(currentPlayer === 'black' ? 'white' : 'black');\n      }\n    }\n  };\n\n  // 重置游戏\n  const resetGame = () => {\n    setBoard(Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(null)));\n    setCurrentPlayer('black');\n    setGameOver(false);\n    setWinner(null);\n    setGameStarted(false);\n    setWaitingForTourist(false);\n  };\n\n  // 开始游戏\n  const startGame = (mode) => {\n    setGameMode(mode);\n    setGameStarted(true);\n    setBoard(Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill(null)));\n    setCurrentPlayer('black');\n    setGameOver(false);\n    setWinner(null);\n    \n    // 游客模式下，随机分配玩家角色\n    if (mode === 'tourist') {\n      setPlayerRole(Math.random() > 0.5 ? 'black' : 'white');\n      setWaitingForTourist(true);\n      // 模拟游客加入\n      setTimeout(() => {\n        setWaitingForTourist(false);\n        // 如果玩家是白方，游客（黑方）先行\n        if (playerRole === 'white') {\n          setTimeout(() => simulateTouristMove(), 500);\n        }\n      }, 1500);\n    }\n  };\n\n  // 绘制棋盘\n  const renderBoard = () => {\n    return (\n      <div className=\"gomoku-board\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"gomoku-row\">\n            {row.map((cell, colIndex) => (\n              <div \n                key={colIndex} \n                className=\"gomoku-cell\"\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cell && <div className={`gomoku-stone ${cell}`}></div>}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"gomoku-game\">\n      <h3>五子棋游戏</h3>\n      <p className=\"game-info\">\n        {gameOver ? \n          `游戏结束！获胜方: ${winner === 'black' ? '黑方' : '白方'}` : \n          `当前回合: ${currentPlayer === 'black' ? '黑方' : '白方'}`}\n      </p>\n      {renderBoard()}\n      <button className=\"reset-btn\" onClick={resetGame}>重新开始</button>\n      <div className=\"game-rules\">\n        <h4>游戏规则：</h4>\n        <ol>\n          <li>黑方先行，双方轮流在棋盘上落子</li>\n          <li>先在横、竖或对角线方向连成五子的一方获胜</li>\n          <li>点击棋盘上的交叉点落子</li>\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nexport default GomokuGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}