{"ast":null,"code":"var _jsxFileName = \"E:\\\\Leon\\\\todolist\\\\src\\\\components\\\\TetrisGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './TetrisGame.css';\n\n// 定义俄罗斯方块的形状\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SHAPES = {\n  I: [[1, 1, 1, 1]],\n  O: [[1, 1], [1, 1]],\n  T: [[0, 1, 0], [1, 1, 1]],\n  L: [[1, 0, 0], [1, 1, 1]],\n  J: [[0, 0, 1], [1, 1, 1]],\n  Z: [[1, 1, 0], [0, 1, 1]],\n  S: [[0, 1, 1], [1, 1, 0]]\n};\n\n// 定义颜色\nconst COLORS = {\n  I: '#00FFFF',\n  O: '#FFFF00',\n  T: '#800080',\n  L: '#FFA500',\n  J: '#0000FF',\n  Z: '#FF0000',\n  S: '#00FF00',\n  empty: '#CCCCCC'\n};\n\n// 旋转矩阵\nconst rotateMatrix = matrix => {\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  const rotated = Array(cols).fill().map(() => Array(rows).fill(0));\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      rotated[j][rows - 1 - i] = matrix[i][j];\n    }\n  }\n  return rotated;\n};\nconst TetrisGame = () => {\n  _s();\n  const BOARD_WIDTH = 10;\n  const BOARD_HEIGHT = 20;\n  const [board, setBoard] = useState(Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0)));\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [currentPosition, setCurrentPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const gameLoopRef = useRef(null);\n  const [level, setLevel] = useState(1);\n\n  // 生成新方块\n  const generateNewPiece = () => {\n    const shapeKeys = Object.keys(SHAPES);\n    const randomShapeKey = shapeKeys[Math.floor(Math.random() * shapeKeys.length)];\n    const shape = SHAPES[randomShapeKey];\n    return {\n      shape,\n      type: randomShapeKey,\n      color: COLORS[randomShapeKey]\n    };\n  };\n\n  // 初始化游戏\n  const initializeGame = () => {\n    const newBoard = Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\n    setBoard(newBoard);\n    setCurrentPiece(generateNewPiece());\n    setCurrentPosition({\n      x: Math.floor(BOARD_WIDTH / 2) - 1,\n      y: 0\n    });\n    setScore(0);\n    setGameOver(false);\n    setLevel(1);\n  };\n\n  // 检查碰撞\n  const checkCollision = (piece, position) => {\n    const {\n      shape\n    } = piece;\n    const {\n      x,\n      y\n    } = position;\n    for (let i = 0; i < shape.length; i++) {\n      for (let j = 0; j < shape[i].length; j++) {\n        if (shape[i][j]) {\n          const boardX = x + j;\n          const boardY = y + i;\n          if (boardX < 0 || boardX >= BOARD_WIDTH || boardY >= BOARD_HEIGHT || boardY >= 0 && board[boardY][boardX]) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  // 合并方块到游戏板\n  const mergePieceToBoard = () => {\n    const newBoard = JSON.parse(JSON.stringify(board));\n    const {\n      shape\n    } = currentPiece;\n    const {\n      x,\n      y\n    } = currentPosition;\n    for (let i = 0; i < shape.length; i++) {\n      for (let j = 0; j < shape[i].length; j++) {\n        if (shape[i][j]) {\n          const boardX = x + j;\n          const boardY = y + i;\n          if (boardY >= 0) {\n            newBoard[boardY][boardX] = currentPiece.type;\n          }\n        }\n      }\n    }\n    return newBoard;\n  };\n\n  // 清除完整行\n  const clearCompleteLines = newBoard => {\n    let linesCleared = 0;\n    const updatedBoard = newBoard.filter(row => {\n      if (row.every(cell => cell !== 0)) {\n        linesCleared++;\n        return false;\n      }\n      return true;\n    });\n\n    // 在顶部添加新的空行\n    while (updatedBoard.length < BOARD_HEIGHT) {\n      updatedBoard.unshift(Array(BOARD_WIDTH).fill(0));\n    }\n\n    // 更新分数\n    if (linesCleared > 0) {\n      setScore(prevScore => prevScore + linesCleared * 100 * level);\n      // 每获得1000分升级\n      if (score + linesCleared * 100 * level >= level * 1000) {\n        setLevel(prevLevel => prevLevel + 1);\n      }\n    }\n    return updatedBoard;\n  };\n\n  // 移动方块\n  const movePiece = (dx, dy) => {\n    if (gameOver || !currentPiece) return;\n    const newPosition = {\n      x: currentPosition.x + dx,\n      y: currentPosition.y + dy\n    };\n    if (!checkCollision(currentPiece, newPosition)) {\n      setCurrentPosition(newPosition);\n      return true;\n    } else if (dy > 0) {\n      // 无法下移，合并方块到游戏板\n      const newBoard = mergePieceToBoard();\n      const clearedBoard = clearCompleteLines(newBoard);\n      setBoard(clearedBoard);\n\n      // 生成新方块\n      const newPiece = generateNewPiece();\n      const newPiecePosition = {\n        x: Math.floor(BOARD_WIDTH / 2) - 1,\n        y: 0\n      };\n\n      // 检查游戏是否结束\n      if (checkCollision(newPiece, newPiecePosition)) {\n        setGameOver(true);\n        clearInterval(gameLoopRef.current);\n      } else {\n        setCurrentPiece(newPiece);\n        setCurrentPosition(newPiecePosition);\n      }\n      return false;\n    }\n    return false;\n  };\n\n  // 旋转方块\n  const rotatePiece = () => {\n    if (gameOver || !currentPiece) return;\n    const rotatedShape = rotateMatrix(currentPiece.shape);\n    const rotatedPiece = {\n      ...currentPiece,\n      shape: rotatedShape\n    };\n    if (!checkCollision(rotatedPiece, currentPosition)) {\n      setCurrentPiece(rotatedPiece);\n    }\n  };\n\n  // 快速下落\n  const hardDrop = () => {\n    if (gameOver) return;\n    let dropped = false;\n    while (!dropped) {\n      dropped = !movePiece(0, 1);\n    }\n  };\n\n  // 处理键盘输入\n  const handleKeyDown = e => {\n    // 阻止默认行为，避免浏览器滚动等干扰\n    e.preventDefault();\n    if (gameOver) {\n      if (e.key === ' ') {\n        initializeGame();\n      }\n      return;\n    }\n\n    // 添加调试日志，查看键盘事件是否被捕获\n    console.log('Key pressed:', e.key);\n    switch (e.key) {\n      case 'ArrowLeft':\n        movePiece(-1, 0);\n        break;\n      case 'ArrowRight':\n        movePiece(1, 0);\n        break;\n      case 'ArrowDown':\n        movePiece(0, 1);\n        break;\n      case 'ArrowUp':\n        rotatePiece();\n        break;\n      case ' ':\n        hardDrop();\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 游戏循环\n  useEffect(() => {\n    initializeGame();\n    const handleKeyDownWrapper = e => {\n      handleKeyDown(e);\n    };\n    // 在document上监听键盘事件，确保游戏始终能捕获键盘输入\n    document.addEventListener('keydown', handleKeyDownWrapper);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDownWrapper);\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, []);\n\n  // 游戏速度控制\n  useEffect(() => {\n    if (gameOver) return;\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n    const speed = 1000 - (level - 1) * 100;\n    gameLoopRef.current = setInterval(() => {\n      movePiece(0, 1);\n    }, Math.max(100, speed));\n    return () => {\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, [gameOver, level]);\n\n  // 渲染游戏板\n  const renderBoard = () => {\n    // 创建一个临时游戏板，包含当前方块\n    const tempBoard = JSON.parse(JSON.stringify(board));\n    if (currentPiece && !gameOver) {\n      const {\n        shape\n      } = currentPiece;\n      const {\n        x,\n        y\n      } = currentPosition;\n      for (let i = 0; i < shape.length; i++) {\n        for (let j = 0; j < shape[i].length; j++) {\n          if (shape[i][j]) {\n            const boardX = x + j;\n            const boardY = y + i;\n            if (boardY >= 0 && boardY < BOARD_HEIGHT && boardX >= 0 && boardX < BOARD_WIDTH) {\n              tempBoard[boardY][boardX] = currentPiece.type;\n            }\n          }\n        }\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tetris-board\",\n      children: tempBoard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tetris-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tetris-cell\",\n          style: {\n            backgroundColor: cell ? COLORS[cell] : COLORS.empty\n          }\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 渲染下一个方块预览\n  const renderNextPiece = () => {\n    if (!currentPiece || gameOver) return null;\n\n    // 生成下一个方块预览\n    const nextPiece = generateNewPiece();\n    const {\n      shape,\n      color\n    } = nextPiece;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next-piece\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\u4E0B\\u4E00\\u4E2A\\u65B9\\u5757\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next-piece-container\",\n        children: shape.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tetris-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tetris-cell\",\n            style: {\n              backgroundColor: cell ? color : COLORS.empty\n            }\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tetris-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u4FC4\\u7F57\\u65AF\\u65B9\\u5757\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u5206\\u6570: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u7B49\\u7EA7: \", level]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), renderNextPiece()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), renderBoard(), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\u6E38\\u620F\\u7ED3\\u675F!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u6700\\u7EC8\\u5F97\\u5206: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-btn\",\n        onClick: initializeGame,\n        children: \"\\u91CD\\u65B0\\u5F00\\u59CB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\u64CD\\u4F5C\\u8BF4\\u660E:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2190 \\u2192 \\u952E: \\u5DE6\\u53F3\\u79FB\\u52A8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2191 \\u952E: \\u65CB\\u8F6C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2193 \\u952E: \\u4E0B\\u79FB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u7A7A\\u683C\\u952E: \\u76F4\\u63A5\\u843D\\u4E0B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n};\n_s(TetrisGame, \"Tf/GKrFK6uB7MvJ/nnUdmA5KscU=\");\n_c = TetrisGame;\nexport default TetrisGame;\nvar _c;\n$RefreshReg$(_c, \"TetrisGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SHAPES","I","O","T","L","J","Z","S","COLORS","empty","rotateMatrix","matrix","rows","length","cols","rotated","Array","fill","map","i","j","TetrisGame","_s","BOARD_WIDTH","BOARD_HEIGHT","board","setBoard","currentPiece","setCurrentPiece","currentPosition","setCurrentPosition","x","y","score","setScore","gameOver","setGameOver","gameLoopRef","level","setLevel","generateNewPiece","shapeKeys","Object","keys","randomShapeKey","Math","floor","random","shape","type","color","initializeGame","newBoard","checkCollision","piece","position","boardX","boardY","mergePieceToBoard","JSON","parse","stringify","clearCompleteLines","linesCleared","updatedBoard","filter","row","every","cell","unshift","prevScore","prevLevel","movePiece","dx","dy","newPosition","clearedBoard","newPiece","newPiecePosition","clearInterval","current","rotatePiece","rotatedShape","rotatedPiece","hardDrop","dropped","handleKeyDown","e","preventDefault","key","console","log","handleKeyDownWrapper","document","addEventListener","removeEventListener","speed","setInterval","max","renderBoard","tempBoard","className","children","rowIndex","colIndex","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","renderNextPiece","nextPiece","onClick","_c","$RefreshReg$"],"sources":["E:/Leon/todolist/src/components/TetrisGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './TetrisGame.css';\n\n// 定义俄罗斯方块的形状\nconst SHAPES = {\n  I: [\n    [1, 1, 1, 1]\n  ],\n  O: [\n    [1, 1],\n    [1, 1]\n  ],\n  T: [\n    [0, 1, 0],\n    [1, 1, 1]\n  ],\n  L: [\n    [1, 0, 0],\n    [1, 1, 1]\n  ],\n  J: [\n    [0, 0, 1],\n    [1, 1, 1]\n  ],\n  Z: [\n    [1, 1, 0],\n    [0, 1, 1]\n  ],\n  S: [\n    [0, 1, 1],\n    [1, 1, 0]\n  ]\n};\n\n// 定义颜色\nconst COLORS = {\n  I: '#00FFFF',\n  O: '#FFFF00',\n  T: '#800080',\n  L: '#FFA500',\n  J: '#0000FF',\n  Z: '#FF0000',\n  S: '#00FF00',\n  empty: '#CCCCCC'\n};\n\n// 旋转矩阵\nconst rotateMatrix = (matrix) => {\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  const rotated = Array(cols).fill().map(() => Array(rows).fill(0));\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      rotated[j][rows - 1 - i] = matrix[i][j];\n    }\n  }\n\n  return rotated;\n};\n\nconst TetrisGame = () => {\n  const BOARD_WIDTH = 10;\n  const BOARD_HEIGHT = 20;\n  const [board, setBoard] = useState(Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0)));\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [currentPosition, setCurrentPosition] = useState({ x: 0, y: 0 });\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const gameLoopRef = useRef(null);\n  const [level, setLevel] = useState(1);\n\n  // 生成新方块\n  const generateNewPiece = () => {\n    const shapeKeys = Object.keys(SHAPES);\n    const randomShapeKey = shapeKeys[Math.floor(Math.random() * shapeKeys.length)];\n    const shape = SHAPES[randomShapeKey];\n\n    return {\n      shape,\n      type: randomShapeKey,\n      color: COLORS[randomShapeKey]\n    };\n  };\n\n  // 初始化游戏\n  const initializeGame = () => {\n    const newBoard = Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\n    setBoard(newBoard);\n    setCurrentPiece(generateNewPiece());\n    setCurrentPosition({ x: Math.floor(BOARD_WIDTH / 2) - 1, y: 0 });\n    setScore(0);\n    setGameOver(false);\n    setLevel(1);\n  };\n\n  // 检查碰撞\n  const checkCollision = (piece, position) => {\n    const { shape } = piece;\n    const { x, y } = position;\n\n    for (let i = 0; i < shape.length; i++) {\n      for (let j = 0; j < shape[i].length; j++) {\n        if (shape[i][j]) {\n          const boardX = x + j;\n          const boardY = y + i;\n\n          if (\n            boardX < 0 ||\n            boardX >= BOARD_WIDTH ||\n            boardY >= BOARD_HEIGHT ||\n            (boardY >= 0 && board[boardY][boardX])\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  // 合并方块到游戏板\n  const mergePieceToBoard = () => {\n    const newBoard = JSON.parse(JSON.stringify(board));\n    const { shape } = currentPiece;\n    const { x, y } = currentPosition;\n\n    for (let i = 0; i < shape.length; i++) {\n      for (let j = 0; j < shape[i].length; j++) {\n        if (shape[i][j]) {\n          const boardX = x + j;\n          const boardY = y + i;\n\n          if (boardY >= 0) {\n            newBoard[boardY][boardX] = currentPiece.type;\n          }\n        }\n      }\n    }\n\n    return newBoard;\n  };\n\n  // 清除完整行\n  const clearCompleteLines = (newBoard) => {\n    let linesCleared = 0;\n    const updatedBoard = newBoard.filter(row => {\n      if (row.every(cell => cell !== 0)) {\n        linesCleared++;\n        return false;\n      }\n      return true;\n    });\n\n    // 在顶部添加新的空行\n    while (updatedBoard.length < BOARD_HEIGHT) {\n      updatedBoard.unshift(Array(BOARD_WIDTH).fill(0));\n    }\n\n    // 更新分数\n    if (linesCleared > 0) {\n      setScore(prevScore => prevScore + linesCleared * 100 * level);\n      // 每获得1000分升级\n      if (score + linesCleared * 100 * level >= level * 1000) {\n        setLevel(prevLevel => prevLevel + 1);\n      }\n    }\n\n    return updatedBoard;\n  };\n\n  // 移动方块\n  const movePiece = (dx, dy) => {\n    if (gameOver || !currentPiece) return;\n\n    const newPosition = {\n      x: currentPosition.x + dx,\n      y: currentPosition.y + dy\n    };\n\n    if (!checkCollision(currentPiece, newPosition)) {\n      setCurrentPosition(newPosition);\n      return true;\n    } else if (dy > 0) {\n      // 无法下移，合并方块到游戏板\n      const newBoard = mergePieceToBoard();\n      const clearedBoard = clearCompleteLines(newBoard);\n      setBoard(clearedBoard);\n\n      // 生成新方块\n      const newPiece = generateNewPiece();\n      const newPiecePosition = { x: Math.floor(BOARD_WIDTH / 2) - 1, y: 0 };\n\n      // 检查游戏是否结束\n      if (checkCollision(newPiece, newPiecePosition)) {\n        setGameOver(true);\n        clearInterval(gameLoopRef.current);\n      } else {\n        setCurrentPiece(newPiece);\n        setCurrentPosition(newPiecePosition);\n      }\n      return false;\n    }\n\n    return false;\n  };\n\n  // 旋转方块\n  const rotatePiece = () => {\n    if (gameOver || !currentPiece) return;\n\n    const rotatedShape = rotateMatrix(currentPiece.shape);\n    const rotatedPiece = {\n      ...currentPiece,\n      shape: rotatedShape\n    };\n\n    if (!checkCollision(rotatedPiece, currentPosition)) {\n      setCurrentPiece(rotatedPiece);\n    }\n  };\n\n  // 快速下落\n  const hardDrop = () => {\n    if (gameOver) return;\n\n    let dropped = false;\n    while (!dropped) {\n      dropped = !movePiece(0, 1);\n    }\n  };\n\n  // 处理键盘输入\n  const handleKeyDown = (e) => {\n    // 阻止默认行为，避免浏览器滚动等干扰\n    e.preventDefault();\n\n    if (gameOver) {\n      if (e.key === ' ') {\n        initializeGame();\n      }\n      return;\n    }\n\n    // 添加调试日志，查看键盘事件是否被捕获\n    console.log('Key pressed:', e.key);\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        movePiece(-1, 0);\n        break;\n      case 'ArrowRight':\n        movePiece(1, 0);\n        break;\n      case 'ArrowDown':\n        movePiece(0, 1);\n        break;\n      case 'ArrowUp':\n        rotatePiece();\n        break;\n      case ' ':\n        hardDrop();\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 游戏循环\n  useEffect(() => {\n    initializeGame();\n    const handleKeyDownWrapper = (e) => {\n      handleKeyDown(e);\n    };\n    // 在document上监听键盘事件，确保游戏始终能捕获键盘输入\n    document.addEventListener('keydown', handleKeyDownWrapper);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDownWrapper);\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, []);\n\n  // 游戏速度控制\n  useEffect(() => {\n    if (gameOver) return;\n\n    if (gameLoopRef.current) {\n      clearInterval(gameLoopRef.current);\n    }\n\n    const speed = 1000 - (level - 1) * 100;\n    gameLoopRef.current = setInterval(() => {\n      movePiece(0, 1);\n    }, Math.max(100, speed));\n\n    return () => {\n      if (gameLoopRef.current) {\n        clearInterval(gameLoopRef.current);\n      }\n    };\n  }, [gameOver, level]);\n\n  // 渲染游戏板\n  const renderBoard = () => {\n    // 创建一个临时游戏板，包含当前方块\n    const tempBoard = JSON.parse(JSON.stringify(board));\n\n    if (currentPiece && !gameOver) {\n      const { shape } = currentPiece;\n      const { x, y } = currentPosition;\n\n      for (let i = 0; i < shape.length; i++) {\n        for (let j = 0; j < shape[i].length; j++) {\n          if (shape[i][j]) {\n            const boardX = x + j;\n            const boardY = y + i;\n\n            if (boardY >= 0 && boardY < BOARD_HEIGHT && boardX >= 0 && boardX < BOARD_WIDTH) {\n              tempBoard[boardY][boardX] = currentPiece.type;\n            }\n          }\n        }\n      }\n    }\n\n    return (\n      <div className=\"tetris-board\">\n        {tempBoard.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"tetris-row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className=\"tetris-cell\"\n                style={{ backgroundColor: cell ? COLORS[cell] : COLORS.empty }}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  // 渲染下一个方块预览\n  const renderNextPiece = () => {\n    if (!currentPiece || gameOver) return null;\n\n    // 生成下一个方块预览\n    const nextPiece = generateNewPiece();\n    const { shape, color } = nextPiece;\n\n    return (\n      <div className=\"next-piece\">\n        <h4>下一个方块</h4>\n        <div className=\"next-piece-container\">\n          {shape.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"tetris-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className=\"tetris-cell\"\n                  style={{ backgroundColor: cell ? color : COLORS.empty }}\n                ></div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"tetris-game\">\n      <h3>俄罗斯方块</h3>\n      <div className=\"game-info\">\n        <div className=\"score-display\">\n          <p>分数: {score}</p>\n          <p>等级: {level}</p>\n        </div>\n        {renderNextPiece()}\n      </div>\n      {renderBoard()}\n      {gameOver && (\n        <div className=\"game-over\">\n          <h4>游戏结束!</h4>\n          <p>最终得分: {score}</p>\n          <button className=\"reset-btn\" onClick={initializeGame}>重新开始</button>\n        </div>\n      )}\n      <div className=\"game-controls\">\n        <h4>操作说明:</h4>\n        <ul>\n          <li>← → 键: 左右移动</li>\n          <li>↑ 键: 旋转</li>\n          <li>↓ 键: 下移</li>\n          <li>空格键: 直接落下</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default TetrisGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}