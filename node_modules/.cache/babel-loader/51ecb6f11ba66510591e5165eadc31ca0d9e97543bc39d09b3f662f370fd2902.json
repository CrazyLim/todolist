{"ast":null,"code":"var _jsxFileName = \"E:\\\\Leon\\\\todolist\\\\src\\\\components\\\\ClockWeatherWidget.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ClockWeatherWidget.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ClockWeatherWidget() {\n  _s();\n  // 时间状态\n  const [currentTime, setCurrentTime] = useState(new Date());\n  // 天气状态\n  const [weather, setWeather] = useState({\n    temperature: '加载中...',\n    description: '加载中...',\n    icon: '☀️'\n  });\n\n  // 更新时间\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // 模拟获取天气数据\n  useEffect(() => {\n    // 实际项目中这里应该是API请求\n    const fetchWeather = () => {\n      // 模拟天气数据，实际应用中应该从天气API获取\n      const weatherData = {\n        temperature: '24°C',\n        description: '晴朗',\n        icon: '☀️'\n      };\n      setWeather(weatherData);\n    };\n    fetchWeather();\n    // 每10分钟更新一次天气\n    const weatherTimer = setInterval(fetchWeather, 600000);\n    return () => clearInterval(weatherTimer);\n  }, []);\n\n  // 格式化时间\n  const formatTime = date => {\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  };\n\n  // 格式化日期\n  const formatDate = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n    const weekday = weekdays[date.getDay()];\n    return `${year}年${month}月${day}日 ${weekday}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clock-weather-widget\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time\",\n        children: formatTime(currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date\",\n        children: formatDate(currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-icon\",\n        children: weather.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"temperature\",\n          children: weather.temperature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"description\",\n          children: weather.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(ClockWeatherWidget, \"yWjKVDOGo1tCWfoHhsOYvMM3ETM=\");\n_c = ClockWeatherWidget;\nexport default ClockWeatherWidget;\nvar _c;\n$RefreshReg$(_c, \"ClockWeatherWidget\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ClockWeatherWidget","_s","currentTime","setCurrentTime","Date","weather","setWeather","temperature","description","icon","timer","setInterval","clearInterval","fetchWeather","weatherData","weatherTimer","formatTime","date","hours","String","getHours","padStart","minutes","getMinutes","seconds","getSeconds","formatDate","year","getFullYear","month","getMonth","day","getDate","weekdays","weekday","getDay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Leon/todolist/src/components/ClockWeatherWidget.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ClockWeatherWidget.css';\n\nfunction ClockWeatherWidget() {\n  // 时间状态\n  const [currentTime, setCurrentTime] = useState(new Date());\n  // 天气状态\n  const [weather, setWeather] = useState({\n    temperature: '加载中...',\n    description: '加载中...',\n    icon: '☀️'\n  });\n\n  // 更新时间\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // 模拟获取天气数据\n  useEffect(() => {\n    // 实际项目中这里应该是API请求\n    const fetchWeather = () => {\n      // 模拟天气数据，实际应用中应该从天气API获取\n      const weatherData = {\n        temperature: '24°C',\n        description: '晴朗',\n        icon: '☀️'\n      };\n      setWeather(weatherData);\n    };\n\n    fetchWeather();\n    // 每10分钟更新一次天气\n    const weatherTimer = setInterval(fetchWeather, 600000);\n    return () => clearInterval(weatherTimer);\n  }, []);\n\n  // 格式化时间\n  const formatTime = (date) => {\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  };\n\n  // 格式化日期\n  const formatDate = (date) => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n    const weekday = weekdays[date.getDay()];\n    return `${year}年${month}月${day}日 ${weekday}`;\n  };\n\n  return (\n    <div className=\"clock-weather-widget\">\n      <div className=\"clock\">\n        <div className=\"time\">{formatTime(currentTime)}</div>\n        <div className=\"date\">{formatDate(currentTime)}</div>\n      </div>\n      <div className=\"weather\">\n        <div className=\"weather-icon\">{weather.icon}</div>\n        <div className=\"weather-info\">\n          <div className=\"temperature\">{weather.temperature}</div>\n          <div className=\"description\">{weather.description}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ClockWeatherWidget;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}